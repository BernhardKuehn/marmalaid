library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
?parallelMap::parallelRegisterLevels
parallelMap::parallelRegisterLevels
parallelMap::parallelStartSocket
parallelMap::parallelStart
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
?SOM.qualityMetrics
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
?RMSe
?RMSE
?metricfuncs
?metricfuns
library(spatialMarineMLtools)
?RMSE
library(spatialMarineMLtools)
library(spatialMarineMLtools)
load("D:/Corona HomeOffice/MEPS paper R package/paper data/Cod.NorthSea.RData")
acf(cod$rec)
acf(cod$ssb)
library(caret)
?caret::createDataPartition
createTimeSlices(y = log(cod$rec),initialWindow = 20,horizon = 10)
devtools::document()
spatialMarineMLtools::sst.ahoi
?spatialMarineMLtools::sst.ahoi
sinkr::fieldAnomaly
citation(sinkr)
library(sinkr)
citation(sinkr)
citation("sinkr")
?fieldAnomaly.raster
?fieldAnomaly
?fieldAnomaly.raster
?fieldAnomaly.raster
?fieldAnomaly.raster
?fieldAnomaly.raster
# load AHOI SST data
data(sst.ahoi)
# calculate anomalies
sst.anom = fieldAnomaly.raster(sst.ahoi,time = as.Date(sub("X","",names(sst.ahoi)),format = "%Y.%m.%d"),level = "month")
# plot for comparison
par(mfrow = c(1,2))
plot(sst.anom[[1]],las = 1)
title("SST-anomaly",adj = 0)
plot(sst.ahoi[[1]],las = 1)
title("SST-raw",adj = 0)
sst.anom
# load AHOI SST data
data(sst.ahoi)
# calculate anomalies
sst.anom = fieldAnomaly.raster(sst.ahoi,time = as.Date(sub("X","",names(sst.ahoi)),format = "%Y.%m.%d"),level = "month")
# plot for comparison
par(mfrow = c(1,2))
plot(sst.anom[[1]],las = 1)
title("SST-anomaly",adj = 0)
plot(sst.ahoi[[1]],las = 1)
title("SST-raw",adj = 0)
?fieldAnomaly.raster
# load AHOI SST data
library(raster)
data(sst.ahoi)
# calculate anomalies
sst.anom = fieldAnomaly.raster(sst.ahoi,time = as.Date(sub("X","",names(sst.ahoi)),format = "%Y.%m.%d"),level = "month")
# plot for comparison
par(mfrow = c(1,2))
plot(sst.anom[[1]],las = 1)
title("SST-anomaly",adj = 0)
plot(sst.ahoi[[1]],las = 1)
title("SST-raw",adj = 0)
brick = sst.ahoi
time = as.Date(sub("X","",names(sst.ahoi)),format = "%Y.%m.%d")
time
# calculate anomalies
mat= t(raster::as.matrix(brick)) # rows = temporal dimension # cols = spatial dimension
if(length(time) != nrow(mat)) {
stop(paste("Supplied time vector needs to be the same length as 3rd dim. in the raster brick!",
"\n 3rd dim raster:",nrow(mat),"\n length time:", length(time)))
}
level == "month"
level = "month"
levs <- as.POSIXlt(time)$mon
ulevs <- unique(levs)
ulevs
levs
ulevs
lapply(ulevs, function(x, y) which(y == x), levs)
y
levs
?lapply
ulevs
levs
levs_lookup <- lapply(ulevs, function(x, y) which(y == x), levs)
levs_lookup
names(levs_lookup) <- ulevs
names(levs_lookup)
mat.anom <- mat * NaN
seq(levs_lookup)
t(as.matrix(mat[levs_lookup[[j]],
]))
t(t(as.matrix(mat[levs_lookup[[j]],
])) - apply(as.matrix(mat[levs_lookup[[j]], ]), 2,
mean, na.rm = TRUE))
j = 1
t(t(as.matrix(mat[levs_lookup[[j]],
])) - apply(as.matrix(mat[levs_lookup[[j]], ]), 2,
mean, na.rm = TRUE))
mat.anom <- mat * NaN
for (j in seq(levs_lookup)) {
mat.anom[levs_lookup[[j]], ] <- t(t(as.matrix(mat[levs_lookup[[j]],
])) - apply(as.matrix(mat[levs_lookup[[j]], ]), 2,
mean, na.rm = TRUE))
}
monthly.anom = raster::rasterFromXYZ(data.frame(raster::xyFromCell(brick,cell = 1:raster::ncell(brick)),t(mat.anom)))
monthly.anom
monthly.anom2 = monthly.anom
monthly.anom = fieldAnomaly(mat,time,level = "month")
monthly.anom = raster::rasterFromXYZ(data.frame(raster::xyFromCell(brick,cell = 1:raster::ncell(brick)),t(mat.anom)))
iamge(monthly.anom)
image(monthly.anom)
image(monthly.anom2)
monthly.anom - monthly.anom2
cellStats(monthly.anom - monthly.anom2,mean)
?spatialPCA
library(spatialMarineMLtools)
?spatialPCA
library(spatialMarineMLtools)
# load AHOI SST data
data(sst.ahoi)
# perform EOF-analysis
SST.EOF = spatial.PCA(sst.ahoi,center = T,scale. = F,spatial.extent = NULL,plot = F)
# plot first EOF with PC timeseries
layout(matrix(rep(c(1,2),each = 2),nrow = 2,ncol = 2,byrow = T),heights = c(0.65,0.35))
par(mar = c(4,4,3,3))
image(SST.EOF$raster[[1]],las = 1,xlab = "lon",ylab = "lat")
maps::map(add = T,fill = T,col = "gray80");box()
title("EOF1",adj = 0)
plot(SST.EOF$time,SST.EOF$sp.PCA$x[,1],type = "l",las = 1,xlab = "time",ylab = "")
title("PC1",adj = 0)
library(raster)
# load AHOI SST data
data(sst.ahoi)
# perform EOF-analysis
SST.EOF = spatial.PCA(sst.ahoi,center = T,scale. = F,spatial.extent = NULL,plot = F)
# plot first EOF with PC timeseries
layout(matrix(rep(c(1,2),each = 2),nrow = 2,ncol = 2,byrow = T),heights = c(0.65,0.35))
par(mar = c(4,4,3,3))
image(SST.EOF$raster[[1]],las = 1,xlab = "lon",ylab = "lat")
maps::map(add = T,fill = T,col = "gray80");box()
title("EOF1",adj = 0)
plot(SST.EOF$time,SST.EOF$sp.PCA$x[,1],type = "l",las = 1,xlab = "time",ylab = "")
title("PC1",adj = 0)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
?spatial.PCA
?spatial.SOM
View(spatial.SOM)
library(raster)
data(sst.ahoi)
# calculate field anomaly
sst.anom = fieldAnomaly.raster(brick = sst.ahoi,
time = as.Date(sub("X","",names(sst.ahoi)),format = "%Y.%m.%d"),
level = "month")
# calc. mean over summer season
sst.JJA = calc.mean.over.Month(sst.anom,
time = as.Date(sub("X","",names(sst.anom)),
format = "%Y.%m.%d"),
month = c(6,7,8),shiftYear = F)
# calculate spatial SOM
SST.SOM = spatial.SOM(x = sst.JJA,time = as.numeric(sub("X","",names(sst.JJA))),
plot = F,seed = 1234,
parallel = c(parallel = TRUE,cores = 2),
reps = 50,return.all = F,
grid = kohonen::somgrid(xdim = 3,ydim = 3,topo = "rectangular",neighbourhood.fct = "bubble",toroidal = F),
mode = "online",rlen = 1000)
plot(SST.SOM$SOM.raster)
library(kohonen)
data(sst.ahoi)
# calculate field anomaly
sst.anom = fieldAnomaly.raster(brick = sst.ahoi,
time = as.Date(sub("X","",names(sst.ahoi)),format = "%Y.%m.%d"),
level = "month")
# calc. mean over summer season
sst.JJA = calc.mean.over.Month(sst.anom,
time = as.Date(sub("X","",names(sst.anom)),
format = "%Y.%m.%d"),
month = c(6,7,8),shiftYear = F)
# calculate spatial SOM
SST.SOM = spatial.SOM(x = sst.JJA,time = as.numeric(sub("X","",names(sst.JJA))),
plot = F,seed = 1234,
parallel = c(parallel = TRUE,cores = 2),
reps = 50,return.all = F,
grid = kohonen::somgrid(xdim = 3,ydim = 3,topo = "rectangular",neighbourhood.fct = "bubble",toroidal = F),
mode = "online",rlen = 1000)
plot(SST.SOM$SOM.raster)
library(spatialMarineMLtools)
?NSGA.II_wrapper
library(spatialMarineMLtools)
?NSGA.II_wrapper
?spatial.PCA
# load AHOI SST data
data(sst.ahoi)
# perform EOF-analysis
SST.EOF = spatial.PCA(sst.ahoi,center = T,scale. = F,spatial.extent = NULL,plot = F)
# plot first EOF with PC timeseries
layout(matrix(rep(c(1,2),each = 2),nrow = 2,ncol = 2,byrow = T),heights = c(0.65,0.35))
par(mar = c(4,4,3,3))
image(SST.EOF$raster[[1]],las = 1,xlab = "lon",ylab = "lat")
maps::map(add = T,fill = T,col = "gray80");box()
title("EOF1",adj = 0)
plot(SST.EOF$time,SST.EOF$sp.PCA$x[,1],type = "l",las = 1,xlab = "time",ylab = "")
title("PC1",adj = 0)
SST.EOF$raster
SST.EOF$sp.PCA$x
SST.EOF$sp.PCA$sdev/sum(SST.EOF$sp.PCA$sdev)
plot(SST.EOF$sp.PCA$sdev/sum(SST.EOF$sp.PCA$sdev))
plot(SST.EOF$sp.PCA$sdev^2/sum(SST.EOF$sp.PCA$sdev^2))
summary(SST.EOF$sp.PCA)
plot(SST.EOF$sp.PCA$x[,2])
plot(SST.EOF$sp.PCA$x[,2],type ="l")
plot(SST.EOF$sp.PCA$x[,],type ="l")
plot(SST.EOF$sp.PCA$x[,],type ="l")
plot(SST.EOF$sp.PCA$x[,3],type ="l")
plot(SST.EOF$sp.PCA$x[,1],type ="l")
plot(SST.EOF$sp.PCA$x[,2],type ="l")
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
?spatial.SOM
data(sst.ahoi)
# calculate field anomaly
sst.anom = fieldAnomaly.raster(brick = sst.ahoi,
time = as.Date(sub("X","",names(sst.ahoi)),format = "%Y.%m.%d"),
level = "month")
# calc. mean over summer season
sst.JJA = calc.mean.over.Month(sst.anom,
time = as.Date(sub("X","",names(sst.anom)),
format = "%Y.%m.%d"),
month = c(6,7,8),shiftYear = FALSE)
# calculate spatial SOM
SST.SOM = spatial.SOM(x = sst.JJA,time = as.numeric(sub("X","",names(sst.JJA))),
plot = FALSE,seed = 1234,
parallel = c(parallel = TRUE,cores = 2),
reps = 50,return.all = FALSE,
grid = kohonen::somgrid(xdim = 3,ydim = 3,topo = "rectangular",neighbourhood.fct = "bubble",toroidal = FALSE),
mode = "online",rlen = 1000)
plot(SST.SOM$SOM.raster)
?somgrid
?som
library(spatialMarineMLtools)
?SOM.DVIndex
library(raster)
data(sst.ahoi)
sst.anom = fieldAnomaly.raster(brick = sst.ahoi,
time = as.Date(sub("X","",names(sst.ahoi)),format = "%Y.%m.%d"),
level = "month")
# calc. mean over summer season
sst.JJA = calc.mean.over.Month(sst.anom,
time = as.Date(sub("X","",names(sst.anom)),
format = "%Y.%m.%d"),
month = c(6,7,8),shiftYear = F)
# grid sizes
grid.size = data.frame(expand.grid(1:5,1:5))
names(grid.size) = c("xdim","ydim")
SOMs.store = list()
for(i in 1:nrow(grid.size)){
cat(i,"\n")
# calculate spatial SOM
SOMs.store[[i]] = spatial.SOM(x = sst.JJA,time = as.numeric(sub("X","",names(sst.JJA))),
plot = F,seed = NULL,
parallel = c(parallel = FALSE,cores = NA),
reps = 1,return.all = F,
grid = kohonen::somgrid(xdim = grid.size$xdim[i],ydim = grid.size$ydim[i],topo = "rectangular",neighbourhood.fct = "bubble",toroidal = FALSE),
mode = "online",rlen = 1000)
}
# calculate DVI
DVI.SST.JJA = SOM.DVIndex(list.SOM.obj = lapply(SOMs.store,function(x) x$SOM.out),
c.param = 1,
control.for.empty.nodes = T)
DVI.SST.JJA = DVI.SST.JJA[order(DVI.SST.JJA$size),]
# plot DVI
par(mfrow = c(1,1))
plot(1:nrow(DVI.SST.JJA),DVI.SST.JJA$DVI,type = "l",xaxt = "n",xlab = " grid size",ylab  = "DVI",las = 1)
points(1:nrow(DVI.SST.JJA),DVI.SST.JJA$DVI)
abline(v = which(DVI.SST.JJA$DVI == min(DVI.SST.JJA$DVI,na.rm = T)),col = "red",lty = 2)
axis(side = 1,at = 1:nrow(DVI.SST.JJA),labels = DVI.SST.JJA$size)
title("DVI",adj = 0)
warnings()
?salt.ahoi
?sst.ahoi
library(spatialMarineMLtools)
library(spatialMarineMLtools)
?sst.ahoi
library(spatialMarineMLtools)
library(spatialMarineMLtools)
SOM.quant.error
?SOM.quant.error
data(sst.ahoi)
# calculate field anomaly
sst.anom = fieldAnomaly.raster(brick = sst.ahoi,
time = as.Date(sub("X","",names(sst.ahoi)),format = "%Y.%m.%d"),
level = "month")
# calc. mean over summer season
sst.JJA = calc.mean.over.Month(sst.anom,
time = as.Date(sub("X","",names(sst.anom)),
format = "%Y.%m.%d"),
month = c(6,7,8),shiftYear = FALSE)
# calculate spatial SOM
SST.SOM = spatial.SOM(x = sst.JJA,time = as.numeric(sub("X","",names(sst.JJA))),
plot = FALSE,seed = 1234,
parallel = c(parallel = TRUE,cores = 2),
reps = 50,return.all = FALSE,
grid = kohonen::somgrid(xdim = 2,ydim = 3,topo = "rectangular",neighbourhood.fct = "bubble",toroidal = FALSE),
mode = "online",rlen = 1000)
# calculate QE
SST.SOM$SOM.out
SOM.quant.error(SST.SOM$SOM.out)
SOM.topo.error(SST.SOM$SOM.out)
mean(SOM.topo.error(SST.SOM$SOM.out)$Mapping.of.data$C.index)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
indx.PCs/(15:1)
indx.PCs = 1
indx.PCs/(15:1)[which(((indx.PCs/(15:1))%%1 == 0))[1:2]]
indx.PCs/(15:1)
which(((indx.PCs/(15:1))%%1 == 0)
)
indx.PCs/(15:1)[which(((indx.PCs/(15:1))%%1 == 0))
)
which(((indx.PCs/(15:1))%%1 == 0))[1:2]
indx.PCs/(15:1)[which(((indx.PCs/(15:1))%%1 == 0))[1:2]]
plot.x.y[is.na(plot.x.y)] <- 1
# devide plot window in optimal way
plot.x.y = indx.PCs/(15:1)[which(((indx.PCs/(15:1))%%1 == 0))[1:2]]
plot.x.y[is.na(plot.x.y)] <- 1
plot.x.y
plot.x.y = c(1,2)
plot.x.y[is.na(plot.x.y)] <- 1
plot.x.y
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
?SOM.qualityMetrics
library(spatialMarineMLtools)
?SOM.qualityMetrics
library(spatialMarineMLtools)
?SOM.qualityMetrics
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(caret)
library(pracma)
library(ecr)
library(beepr)
# ------------------------------------------- #
# load data set
# recruitment + ssb +  EOF-env.pattern
# ------------------------------------------- #
load("../paper data/Cod.EOF.regression.RData")
xy = xy[complete.cases(xy),]
y = log(xy$rec) # use log recruitment as response
x = xy[,-which(names(xy) %in% c("year","rec"))]
dim(x) # 82 attributes
# --------------------------------- #
# prepare feature selection wrapper
# --------------------------------- #
#assign new name to function (otherwise parallel workers can`t find it`)
fitness.func = MO.fitness.func.extraTrees.ranger
# run with RMSE-metric
metric.func.RMSE = spatialMarineMLtools::RMSE
# define nr. of folds and permutations
formals(fitness.func)$folds <- 5
formals(fitness.func)$reps <- 30
# use the scaled metric
formals(fitness.func)$return.scaled.metric <- T
ga.input.RMSE = list(fitness.func = fitness.func,
metric.func = metric.func.RMSE)
# ----------- #
# run NSGA-II
# ----------- #
EOF.output.feat.sel = NSGA.II_wrapper(
x,y,
seed = 12345,
ga.input = ga.input.RMSE,
mutation.rate = 1/ncol(x),
crossover.rate = 0.8,
memoisation = T,
remove.overlap = T,
pop.size = 100,
offspring.size = 100,
max.iter = 500,
initialize.equal = T,
stop.criterion = 100,
n.cores = 10,
ref.point = c(1,1)
)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
library(spatialMarineMLtools)
?som
?dplyr::mutate
?dplyr::transmute
library(spatialMarineMLtools)
?SOM.qualityMetrics
library(spatialMarineMLtools)
?::
?'::'
library(spatialMarineMLtools)
install.packages("changer")
library(changer)
?changer
library(changer)
setwd("J:/Corona HomeOffice/MEPS paper R package/")
changer(path = "J:/Corona HomeOffice/MEPS paper R package/spatialMarineMLtools/",new_name = "MarineML",run_roxygen = TRUE)
changer(path = "J:/Corona HomeOffice/MEPS paper R package/spatialMarineMLtools/",new_name = "MarineML",run_roxygen = TRUE)
library(changer)
setwd("J:/Corona HomeOffice/MEPS paper R package/")
changer(path = "J:/Corona HomeOffice/MEPS paper R package/spatialMarineMLtools/DESCRIPTION",change_git = FALSE,
new_name = "MarineML",run_roxygen = TRUE)
library(marineML)
remove.packages(spatialMarineMLtools)
remove.packages("spatialMarineMLtools")
library(marineML)
library(marineML)
library(marineML)
library(raster)
load("../paper data/AHOI.SST.RData")
load("../paper data/AHOI.salt.RData")
load("../paper data/ORAS4.Currents.RData")
load("../paper data/Cod.NorthSea.RData")
# anomalies
SST.anom = fieldAnomaly.raster(AHOI.SST$raster,time = AHOI.SST$time,level = "month")
Salt.anom = fieldAnomaly.raster(AHOI.salt$raster,time = AHOI.salt$time,level = "month")
Currents.anom = lapply(ORAS4.Currents$raster,function(x) fieldAnomaly.raster(x,time = ORAS4.Currents$time,level = "month"))
# seasonal means
salt.anom.month = SST.anom.month = Currents.anom.month = list()
month.codes = list(DJF = c(12,1,2),
MAM = 3:5,
JJA = 6:8,
SON = 9:11)
for(i in 1:length(month.codes)) {
month = month.codes[[i]]
# for salt
salt.anom.month[[i]] = calc.mean.over.Month(raster = Salt.anom,
time = AHOI.salt$time,month = month,shiftYear = F)
# for temp
SST.anom.month[[i]] = calc.mean.over.Month(raster = SST.anom,time = AHOI.SST$time,month = month,shiftYear = F)
# for currents
Currents.anom.month[[i]] = lapply(Currents.anom,function(x) calc.mean.over.Month(raster = x,
time = ORAS4.Currents$time,
month = month,shiftYear = F))
}
# rename
names(salt.anom.month) = names(SST.anom.month)  = names(Currents.anom.month) = names(month.codes)
# Salt EOF
EOF.Salt = lapply(salt.anom.month,function(x) spatial.PCA(x = x,center = T,scale. = F,
spatial.extent = extent(x),plot = F))
# SST EOF
EOF.SST = lapply(SST.anom.month,function(x) spatial.PCA(x = x,center = T,scale. = F,
spatial.extent = extent(x),plot = F))
# currents EOF
EOF.Currents = lapply(Currents.anom.month,function(x) spatial.PCA(x = x,center = T,scale. = F,
spatial.extent = extent(x[[1]]),plot = F))
set.seed(12345)
SST.Nr.PC = sapply(SST.anom.month,function(x) EOF.Monte.Carlo(x,center = T,scale = F,size = 50,CI.size = 1000)$Nr.PCs)
Salt.Nr.PC = sapply(salt.anom.month,function(x) EOF.Monte.Carlo(x,center = T,scale = F,size = 50,CI.size = 1000)$Nr.PCs)
Currents.Nr.PC = sapply(Currents.anom.month,function(x) EOF.Monte.Carlo(x,center = T,scale = F,size = 50,CI.size = 1000)$Nr.PCs)
# write out
EOF.Nr.PCs = list(Salt.Nr.PC = Salt.Nr.PC,
SST.Nr.PC = SST.Nr.PC,
Currents.Nr.PC = Currents.Nr.PC)
# select variable number of PCs
seasons = c("DJF","MAM","JJA","SON")
names(seasons) = seasons
Salt.PCs = lapply(seasons,function(x) {
tmp = data.frame(year = EOF.Salt[[x]]$time,EOF.Salt[[x]]$sp.PCA$x[,1:Salt.Nr.PC[[x]]])
names(tmp) = paste("Salt",names(tmp),sep = ".");return(tmp)
})
SST.PCs= lapply(seasons,function(x) {
tmp = data.frame(year = EOF.SST[[x]]$time,EOF.SST[[x]]$sp.PCA$x[,1:SST.Nr.PC[[x]]])
names(tmp) = paste("SST",names(tmp),sep = ".");return(tmp)
})
Current.PCs = lapply(seasons,function(x) {
tmp = data.frame(year = EOF.Currents[[x]]$time,EOF.Currents[[x]]$sp.PCA$x[,1:Currents.Nr.PC[[x]]])
names(tmp) = paste("Currents",names(tmp),sep = ".");return(tmp)
})
# write out
EOF.Nr.PCs
library(marmalaid)
remove.packages("marineML")
